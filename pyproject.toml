[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "python_template"
version = "0.1.0"
description = "A template for creating new python projects"
authors = ["cosmo-zvh <github@zvh.io>"]
license = "MIT"
classifiers = [
"Development Status :: 1 - Planning",
"Intended Audience :: Developers",
"License :: OSI Approved :: MIT License",
"Natural Language :: English",
"Operating System :: OS Independent",
"Programming Language :: Python :: 3",
"Topic :: Software Development :: Build Tools",
"Topic :: Software Development :: Code Generators",
]

[tool.poetry.dependencies]
python = "^3.8"

[tool.poetry.dev-dependencies]
psutil = "^5.9.0"
pyinstrument = "^4.1.1"
py-spy = "^0.3.11"
coverage = "^6.3.2"
radon = "^5.1.0"
xenon = "^0.9.0"
MonkeyType = "^22.2.0"
pyannotate = "^1.2.0"
pyupgrade = "^2.31.1"
rope = "^0.23.0"
cohesion = "^1.0.0"
flake8-annotations = "^2.8.0"
flake8-bandit = "^3.0.0"
flake8-broken-line = "^0.4.0"
flake8-bugbear = "^22.3.23"
flake8-builtins = "^1.5.3"
flake8-coding = "^1.3.2"
flake8-comprehensions = "^3.8.0"
flake8-dashboard = "^0.1.4"
flake8-debugger = "^4.0.0"
flake8-docstrings = "^1.6.0"
flake8-eradicate = "^1.2.0"
flake8-executable = "^2.1.1"
flake8-fixme = "^1.1.1"
flake8-functions-names = "^0.3.0"
flake8-logging-format = "^0.6.0"
flake8-multiline-containers = "^0.0.18"
flake8-pep3101 = "^1.3.0"
flake8-pie = "^0.15.0"
flake8-pytest-style = "^1.6.0"
flake8-return = "^1.1.3"
flake8-rst = "^0.8.0"
flake8-rst-docstrings = "^0.2.5"
flake8-quotes = "^3.3.1"
flake8-simplify = "^0.19.2"
flake8-SQL = "^0.4.1"
flake8-todos = "^0.1.5"
flake8-type-checking = "^1.4.0"
flake8-variables-names = "^0.0.5"
pandas-vet = "^0.2.3"
pydantic = "^1.9.0"
pydocstyle = "^6.1.1"
commitizen = "^2.23.0"
breathe = "^4.33.1"
interrogate = {extras = ["png"], version = "^1.5.0"}
numpydoc = "^1.2.1"
releases = "^1.6.3"
sphinx-autobuild = "^2021.3.14"
sphinx-autodoc-annotation = "^1.0-1"
sphinx-autodoc-typehints = "^1.17.0"
sphinx-git = "^11.0.0"
sphinx-gitstamp = "^0.3.2"
sphinx-intl = "^2.0.1"
sphinx-me = "^0.3"
sphinx-prompt = "^1.5.0"
sphinx-pyreverse = "^0.0.17"
sphinx-sitemap = "^2.2.0"
sphinxcontrib-autoprogram = "^0.1.7"
sphinxcontrib-blockdiag = "^3.0.0"
sphinxcontrib-fulltoc = "^1.2.0"
sphinxcontrib-httpdomain = "^1.8.0"
sphinxcontrib-packages = "^1.0.1"
sphinxcontrib-programoutput = "^0.17"
sphinxcontrib-proof = "^1.4.0"
Pallets-Sphinx-Themes = "^2.0.2"
sphinx-better-theme = "^0.1.5"
sphinx-bootstrap-theme = "^0.8.1"
sphinx-nameko-theme = "^0.0.3"
sphinx-readable-theme = "^1.3.0"
sphinx-rtd-theme = "^1.0.0"
pytest-asyncio = "^0.18.3"
pytest-bdd = "^5.0.0"
pytest-benchmark = "^3.4.1"
pytest-datadir = "^1.3.1"
pytest-flake8 = "^1.1.1"
pytest-html = "^3.1.1"
pytest-lazy-fixture = "^0.6.3"
pytest-mock = "^3.7.0"
pytest-mypy = "^0.9.1"
pytest-randomly = "^3.11.0"
pytest-structlog = "^0.5"
pytest-testinfra = "^6.6.0"
pytest-testmon = "^1.3.1"
pytest-tornado = "^0.8.1"
deal = {extras = ["all"], version = "^4.21.1"}
hypothesis = "^6.41.0"
flakeheaven = "^0.11.1"
envparse = "^0.2.0"
hunter = "^3.4.3"
snoop = "^0.4.1"
darglint = "^1.8.1"
black = "^22.3.0"
Cython = "^0.29.28"
dlint = "^0.12.0"
docformatter = "^1.4"
dodgy = "^0.2.1"
dynaconf = "^3.1.7"
pre-commit = "^2.18.1"
pylint-flask = "^0.6"
pyroma = "^3.3"
python-dotenv = "^0.20.0"
safety = "^1.10.3"
setuptools-scm = "^6.4.2"
twine = "^4.0.0"
unimport = "^0.9.5"
better-exceptions = "^0.3.3"
multistructlog = "^2.1.0"
pretty-errors = "^1.2.25"
Pygments = "^2.11.2"
rich = "^12.2.0"
structlog = "^21.5.0"
structlog-pretty = "^0.3.0"
devtools = {extras = ["pygments"], version = "^0.8.0"}
hypothesis-csv = "^0.3.4"
hypothesis-fspaths = "^0.1"
pytest = "^7.1.1"

[tool.poetry.scripts]

[tool.bandit]
tests = ["B201", "B301"]
skips = ["B101", "B601"]

[tool.bandit.any_other_function_with_shell_equals_true]
no_shell = [
  "os.execl",
  "os.execle",
  "os.execlp",
  "os.execlpe",
  "os.execv",
  "os.execve",
  "os.execvp",
  "os.execvpe",
  "os.spawnl",
  "os.spawnle",
  "os.spawnlp",
  "os.spawnlpe",
  "os.spawnv",
  "os.spawnve",
  "os.spawnvp",
  "os.spawnvpe",
  "os.startfile"
]
shell = [
  "os.system",
  "os.popen",
  "os.popen2",
  "os.popen3",
  "os.popen4",
  "popen2.popen2",
  "popen2.popen3",
  "popen2.popen4",
  "popen2.Popen3",
  "popen2.Popen4",
  "commands.getoutput",
  "commands.getstatusoutput"
]
subprocess = [
  "subprocess.Popen",
  "subprocess.call",
  "subprocess.check_call",
  "subprocess.check_output"
]

[tool.black]
line-length = 100
target-version = ["py38", "py39", "py310"]

[tool.commitizen]
name = "cz_conventional_commits"
version = ""
version_files = []
tag_format = ""
update_changelog_on_bump = false
annotated_tag = false
bump_message = ""
changelog_file = ""
changelog_incremental = false
changelog_start_rev = ""
customize = {}
use_shortcuts = false

style = [
    ["qmark", "fg:#ff9d00 bold"],
    ["question", "bold"],
    ["answer", "fg:#ff9d00 bold"],
    ["pointer", "fg:#ff9d00 bold"],
    ["highlighted", "fg:#ff9d00 bold"],
    ["selected", "fg:#cc5454"],
    ["separator", "fg:#cc5454"],
    ["instruction", ""],
    ["text", ""],
    ["disabled", "fg:#858585 italic"]
]

[tool.flake8]
max-line-length = 100
select = ["C, E, F, W, B, B950"]
extend-ignore = ["E203, E501"]

[tool.flakeheaven]
max_line_length = 100
format = "grouped"
show_source = true

[tool.flakeheaven.plugins]
cohesion = ["+*"]
darglint = ["+*"]
dlint = ["+*"]
flake8-annotations = ["+*"]
flake8-bandit = ["+*"]
flake8-broken-line = ["+*"]
flake8-bugbear = ["+*"]
flake8-builtins = ["+*"]
flake8-coding = ["+*"]
flake8-comprehensions = ["+*"]
flake8-dashboard = ["+*"]
flake8-debugger = ["+*"]
flake8-docstrings = ["+*"]
flake8-eradicate = ["+*"]
flake8-executable = ["+*"]
flake8-fixme = ["+*"]
flake8-functions-names = ["+*"]
flake8-logging-format = ["+*"]
flake8-multiline-containers = ["+*"]
flake8-pep3101 = ["+*"]
flake8-pie = ["+*"]
flake8-pytest-style = ["+*"]
flake8-return = ["+*"]
flake8-rst = ["+*"]
flake8-rst-docstrings = ["+*"]
flake8-quotes = ["+*"]
flake8-simplify = ["+*"]
flake8-sql = ["+*"]
flake8-todos = ["+*"]
flake8-type-checking = ["+*"]
flake8-variables-names = ["+*"]
pandas-vet = ["+*"]
pycodestyle = ["+*"]
pyflakes = ["+*", "-F401"]
pylint = ["+*"]

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = false
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = false
ignore-nested-classes = true
ignore-setters = false
fail-under = 95
exclude = ["setup.py", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
# possible values: 0 (minimal output), 1 (-v), 2 (-vv)
verbose = 0
quiet = false
whitelist-regex = []
color = true
omit-covered-files = false
generate-badge = "."
badge-format = "png"
badge-style = "flat-square-modified"

[tool.isort]
profile = "black"
line_length = 100
include_trailing_comma = true
use_parentheses = true
force_single_line = true
force_sort_within_sections = true
lexicographical = false
#single_line_exclusion = ['typing',]
group_by_package = true
skip_gitignore = true
#skip = []
#extend_skip = []
#skip_glob = []
#extend_skip_blob = []
sections = ['FUTURE', 'STDLIB', 'THIRDPARTY', 'FIRSTPARTY', 'LOCALFOLDER']
import_heading_future = "Future Compatability"
import_heading_stdlib = "Standard Library"
import_heading_thirdparty = "Third Party"
import_heading_firstparty = "First Party"
import_heading_localfolder = "Local Imports"
known_third_party = []
known_first_party = []
known_local_folder = []
src_paths = ["src", "tests"]
color_output = true
star_first = true

[tool.liccheck]
authorized_licenses = [
    "bsd",
    "new bsd",
    "bsd license",
    "new bsd license",
    "simplified bsd",
    "apache",
    "apache 2.0",
    "apache software license",
    "gnu lgpl",
    "lgpl with exceptions or zpl",
    "isc license",
    "isc license (iscl)",
    "mit",
    "mit license",
    "python software foundation license",
    "zpl 2.1"
]
unauthorized_licenses = [
  ""
]

[tool.liccheck.authorized_packages]
uuid = "<=1.30"

[tool.mypy]
python_version = 3.8
check_untyped_defs = true
strict_optional = true
warn_unused_configs = true
pretty = true
color_output = true
plugins = "pydantic.mypy"
disallow_untyped_defs = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pylint.format]
max-line-length = 100

[tool.pylint.MASTER]
extension-pkg-whitelist = ''
fail-under = '10.0'
ignore = '.git'
ignore-patterns = ''
#init-hook=
jobs = 0
limit-inference-results = 100
load-plugins = ''
persistent = 'yes'
suggestion-mode = 'yes'
unsafe-load-any-extension = 'no'

[tool.pylint."MESSAGES CONTROL"]
confidence = ''
# disable = ''
# enable = ''

[tool.pylint.REPORTS]
evaluation = '10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)'
#msg-template=
output-format = 'colorized'
reports = 'no'
score = 'yes'

[tool.pylint.REFACTORING]
max-nested-blocks = 5
never-returning-functions = 'sys.exit'

[tool.pylint.LOGGING]
# logging-format-style = 'new'
# logging-modules = 'logging'

[tool.pylint.SPELLING]
max-spelling-suggestions = 4
spelling-dict = ''
spelling-ignore-words = ''
spelling-private-dict-file = ''
spelling-store-unknown-words = 'no'

[tool.pylint.MISCELLANEOUS]
notes = '''FIXME,
      XXX,
      TODO
'''
#notes-rgx=

[tool.pylint.TYPECHECK]
contextmanager-decorators = 'contextlib.contextmanager'
generated-members = ''
ignore-mixin-members = 'yes'
ignore-none = 'yes'
ignore-on-opaque-inference = 'yes'
ignored-classes = 'optparse.Values,thread._local,_thread._local'
ignored-modules = ''
missing-member-hint = 'yes'
missing-member-hint-distance = 1
missing-member-max-choices = 1
signature-mutators = ''

[tool.pylint.VARIABLES]
additional-builtins = ''
allow-global-unused-variables = 'yes'
callbacks = '''cb_,
          _cb
'''
dummy-variables-rgx = '_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_'
ignored-argument-names = '_.*|^ignored_|^unused_'
init-import = 'no'
redefining-builtins-modules = 'six.moves,past.builtins,future.builtins,builtins,io'

[tool.pylint.FORMAT]
expected-line-ending-format = ''
ignore-long-lines = '^\s*(# )?<?https?://\S+>?$'
indent-after-paren = 4
indent-string = '    '
max-line-length = 100
max-module-lines = 1000
single-line-class-stmt = 'no'
single-line-if-stmt = 'no'

[tool.pylint.SIMILARITIES]
ignore-comments = 'yes'
ignore-docstrings = 'yes'
ignore-imports = 'no'
min-similarity-lines = 4

[tool.pylint.BASIC]
argument-naming-style = 'snake_case'
#argument-rgx=
attr-naming-style = 'snake_case'
#attr-rgx=
bad-names = '''foo,
          bar,
          baz,
          toto,
          tutu,
          tata
'''
bad-names-rgxs = ''
class-attribute-naming-style = 'any'
#class-attribute-rgx=
class-naming-style = 'PascalCase'
#class-rgx=
const-naming-style = 'UPPER_CASE'
#const-rgx=
docstring-min-length = -1
function-naming-style = 'snake_case'
#function-rgx=
good-names = '''i,
           j,
           k,
           ex,
           Run,
           pk,
           fd,
           x,
           y,
           _
'''
good-names-rgxs = ''
include-naming-hint = 'no'
inlinevar-naming-style = 'any'
#inlinevar-rgx=
method-naming-style = 'snake_case'
#method-rgx=
module-naming-style = 'snake_case'
#module-rgx=
name-group = ''
no-docstring-rgx = '^_'
property-classes = 'abc.abstractproperty'
variable-naming-style = 'snake_case'
#variable-rgx=

[tool.pylint.STRING]
check-quote-consistency = 'no'
check-str-concat-over-line-jumps = 'no'

[tool.pylint.IMPORTS]
allow-any-import-level = ''
allow-wildcard-with-all = 'no'
analyse-fallback-blocks = 'no'
deprecated-modules = 'optparse,tkinter.tix'
ext-import-graph = ''
import-graph = ''
int-import-graph = ''
known-standard-library = ''
known-third-party = ''
referred-modules = ''

[tool.pylint.CLASSES]
defining-attr-methods = '''__init__,
                      __new__,
                      setUp,
                      __post_init__
'''
exclude-protected = '''_asdict,
                  _fields,
                  _replace,
                  _source,
                  _make
'''
valid-classmethod-first-arg = 'cls'
valid-metaclass-classmethod-first-arg = 'cls'

[tool.pylint.DESIGN]
max-args = 5
max-attributes = 7
max-bool-expr = 5
max-branches = 12
max-locals = 15
max-parents = 7
max-public-methods = 20
max-returns = 6
max-statements = 50
min-public-methods = 2

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = '''BaseException,
                       Exception
'''

[tool.pytest.ini_options]
addopts = ""
# cache_dir = ""
console_output_style = "progress"
# doctest_encoding = ""
# doctest_optionflags = ""
empty_parameter_set_mark = "xfail"
# faulthandler_timeout = ""
# filterwarnings = ""
junit_duration_report = "total"
junit_family = "xunit2"
junit_logging = "all"
junit_log_passing_tests = true
# junit_suite_name = ""
log_auto_indent = true
log_cli = true
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_level = "INFO"
log_date_format = "%Y-%m-%d %H:%M:%S"
log_file = "../logs/pytest-logs.txt"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_file_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)" 
log_file_level = "INFO"
log_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_level = "INFO"
# markers = ""
minversion = "7.1"
norecursedirs = [".git", ".vscode"]
# python_classes = []
python_files = ["test_*.py", "*_test.py", "check_*.py", "*_check.py", "example_*.py", "*_example.py"]
python_functions = ["*_test"]
# pythonpath = []
# required_plugins = []
testpaths = ["tests", "docs"]
# usefixtures = []
xfail_strict = false


[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py27,py36

[testenv]
deps = pytest >= 3.0.0, <4
platform = 
commands = pytest
"""

[tool.unimport]
sources = []
exclude = ''
include = ''
gitignore = true
requirements = true
remove = false
diff = true
include_star_import = true
ignore_init = false
